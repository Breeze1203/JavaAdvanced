{"ast":null,"code":"import axios from \"axios\";\nimport router from \"../router\";\nimport { ElMessage } from 'element-plus';\nconst errorHandle = status => {\n  switch (status) {\n    case 400:\n      ElMessage.error(\"语义有误\");\n      break;\n    case 401:\n      ElMessage.error(\"认证失败\");\n      break;\n    case 403:\n      router.replace(\"/\");\n      break;\n    case 404:\n      break;\n    case 500:\n      ElMessage.error(\"服务器遇到意外\");\n      break;\n    case 502:\n      ElMessage.error(\"服务器无响应\");\n      break;\n    default:\n      break;\n  }\n};\n// 创建一个axios的实例\nconst instance = axios.create({\n  baseURL: '/api',\n  // 网络请求的公共配置信息\n  timeout: 50000\n});\n\n// 请求拦截器(发送请求之前)\ninstance.interceptors.request.use(config => {\n  if (sessionStorage.getItem(\"user\") != null) {}\n  return config;\n}, error => {\n  errorHandle(error.response.status);\n  return Promise.reject(error);\n});\n\n// 响应\ninstance.interceptors.response.use(success => {\n  return success;\n}, error => {\n  errorHandle(error.response.status);\n  return Promise.reject(error);\n});\n\n// 导出网络实例\nexport default instance;","map":{"version":3,"names":["axios","router","ElMessage","errorHandle","status","error","replace","instance","create","baseURL","timeout","interceptors","request","use","config","sessionStorage","getItem","response","Promise","reject","success"],"sources":["D:/everything/项目/adminflow/src/util/axiosUtil.js"],"sourcesContent":["import axios from \"axios\";\r\nimport router from \"../router\";\r\nimport {ElMessage} from 'element-plus';\r\n\r\nconst errorHandle = (status) => {\r\n    switch (status) {\r\n        case 400:\r\n            ElMessage.error(\"语义有误\");\r\n            break;\r\n        case 401:\r\n            ElMessage.error(\"认证失败\");\r\n            break;\r\n        case 403:\r\n            router.replace(\"/\")\r\n            break;\r\n        case 404:\r\n            break;\r\n        case 500:\r\n            ElMessage.error(\"服务器遇到意外\");\r\n            break;\r\n        case 502:\r\n            ElMessage.error(\"服务器无响应\");\r\n            break;\r\n        default:\r\n            break;\r\n    }\r\n}\r\n// 创建一个axios的实例\r\nconst instance = axios.create({\r\n    baseURL: '/api',\r\n    // 网络请求的公共配置信息\r\n    timeout: 50000,\r\n})\r\n\r\n// 请求拦截器(发送请求之前)\r\ninstance.interceptors.request.use(\r\n    config => {\r\n        if (sessionStorage.getItem(\"user\") != null) {\r\n            \r\n        }\r\n        return config\r\n    },\r\n    error => {\r\n        errorHandle(error.response.status);\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 响应\r\ninstance.interceptors.response.use(\r\n    success => {\r\n        return success;\r\n    },\r\n    error => {\r\n        errorHandle(error.response.status);\r\n        return Promise.reject(error)\r\n    }\r\n)\r\n\r\n// 导出网络实例\r\nexport default instance;\r\n\r\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAAQC,SAAS,QAAO,cAAc;AAEtC,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC5B,QAAQA,MAAM;IACV,KAAK,GAAG;MACJF,SAAS,CAACG,KAAK,CAAC,MAAM,CAAC;MACvB;IACJ,KAAK,GAAG;MACJH,SAAS,CAACG,KAAK,CAAC,MAAM,CAAC;MACvB;IACJ,KAAK,GAAG;MACJJ,MAAM,CAACK,OAAO,CAAC,GAAG,CAAC;MACnB;IACJ,KAAK,GAAG;MACJ;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACG,KAAK,CAAC,SAAS,CAAC;MAC1B;IACJ,KAAK,GAAG;MACJH,SAAS,CAACG,KAAK,CAAC,QAAQ,CAAC;MACzB;IACJ;MACI;EACR;AACJ,CAAC;AACD;AACA,MAAME,QAAQ,GAAGP,KAAK,CAACQ,MAAM,CAAC;EAC1BC,OAAO,EAAE,MAAM;EACf;EACAC,OAAO,EAAE;AACb,CAAC,CAAC;;AAEF;AACAH,QAAQ,CAACI,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN,IAAIC,cAAc,CAACC,OAAO,CAAC,MAAM,CAAC,IAAI,IAAI,EAAE,CAE5C;EACA,OAAOF,MAAM;AACjB,CAAC,EACDT,KAAK,IAAI;EACLF,WAAW,CAACE,KAAK,CAACY,QAAQ,CAACb,MAAM,CAAC;EAClC,OAAOc,OAAO,CAACC,MAAM,CAACd,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAE,QAAQ,CAACI,YAAY,CAACM,QAAQ,CAACJ,GAAG,CAC9BO,OAAO,IAAI;EACP,OAAOA,OAAO;AAClB,CAAC,EACDf,KAAK,IAAI;EACLF,WAAW,CAACE,KAAK,CAACY,QAAQ,CAACb,MAAM,CAAC;EAClC,OAAOc,OAAO,CAACC,MAAM,CAACd,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,eAAeE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}