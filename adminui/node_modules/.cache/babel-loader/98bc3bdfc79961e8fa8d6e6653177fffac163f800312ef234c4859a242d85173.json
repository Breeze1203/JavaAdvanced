{"ast":null,"code":"import axios from \"axios\";\nimport router from \"../router\";\nimport { ElMessage } from 'element-plus';\nimport store from \"@/store\";\nconst errorHandle = status => {\n  switch (status) {\n    case 400:\n      ElMessage.error(\"语义有误\");\n      break;\n    case 401:\n      ElMessage.error(\"认证失败\");\n      break;\n    case 403:\n      router.replace(\"/\");\n      break;\n    case 404:\n      break;\n    case 500:\n      ElMessage.error(\"服务器遇到意外\");\n      break;\n    case 502:\n      ElMessage.error(\"服务器无响应\");\n      break;\n    default:\n      break;\n  }\n};\n// 创建一个axios的实例\nconst instance = axios.create({\n  // 网络请求的公共配置信息\n  baseURL: '/api',\n  timeout: 50000,\n  withCredentials: true,\n  headers: {\n    'Content-Type': 'application/json'\n  }\n});\n\n// 请求拦截器(发送请求之前)\ninstance.interceptors.request.use(config => {\n  // 当token不为null时，将其添加到请求头里面\n  if (store.state.token != null) {\n    config.headers[\"Authorization\"] = store.state.token;\n  }\n  return config;\n}, error => {\n  errorHandle(error.response.status);\n  return Promise.reject(error);\n});\n\n// 响应\ninstance.interceptors.response.use(success => {\n  return success;\n}, error => {\n  errorHandle(error.response.status);\n  return Promise.reject(error);\n});\n\n// 导出网络实例\nexport default instance;","map":{"version":3,"names":["axios","router","ElMessage","store","errorHandle","status","error","replace","instance","create","baseURL","timeout","withCredentials","headers","interceptors","request","use","config","state","token","response","Promise","reject","success"],"sources":["/Users/pt/Documents/code/adminflowui/src/util/axiosUtil.js"],"sourcesContent":["import axios from \"axios\";\nimport router from \"../router\";\nimport {ElMessage} from 'element-plus';\nimport store from \"@/store\";\n\nconst errorHandle = (status) => {\n    switch (status) {\n        case 400:\n            ElMessage.error(\"语义有误\");\n            break;\n        case 401:\n            ElMessage.error(\"认证失败\");\n            break;\n        case 403:\n            router.replace(\"/\")\n            break;\n        case 404:\n            break;\n        case 500:\n            ElMessage.error(\"服务器遇到意外\");\n            break;\n        case 502:\n            ElMessage.error(\"服务器无响应\");\n            break;\n        default:\n            break;\n    }\n}\n// 创建一个axios的实例\nconst instance = axios.create({\n    // 网络请求的公共配置信息\n    baseURL: '/api',\n    timeout: 50000,\n    withCredentials: true,\n    headers:{'Content-Type': 'application/json'}\n})\n\n// 请求拦截器(发送请求之前)\ninstance.interceptors.request.use(\n    config => {\n        // 当token不为null时，将其添加到请求头里面\n        if (store.state.token != null) {\n            config.headers[\"Authorization\"] =store.state.token;\n        }\n        return config\n    },\n    error => {\n        errorHandle(error.response.status);\n        return Promise.reject(error)\n    }\n)\n\n// 响应\ninstance.interceptors.response.use(\n    success => {\n        return success;\n    },\n    error => {\n        errorHandle(error.response.status);\n        return Promise.reject(error)\n    }\n)\n\n// 导出网络实例\nexport default instance;\n\n"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,MAAM,MAAM,WAAW;AAC9B,SAAQC,SAAS,QAAO,cAAc;AACtC,OAAOC,KAAK,MAAM,SAAS;AAE3B,MAAMC,WAAW,GAAIC,MAAM,IAAK;EAC5B,QAAQA,MAAM;IACV,KAAK,GAAG;MACJH,SAAS,CAACI,KAAK,CAAC,MAAM,CAAC;MACvB;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,MAAM,CAAC;MACvB;IACJ,KAAK,GAAG;MACJL,MAAM,CAACM,OAAO,CAAC,GAAG,CAAC;MACnB;IACJ,KAAK,GAAG;MACJ;IACJ,KAAK,GAAG;MACJL,SAAS,CAACI,KAAK,CAAC,SAAS,CAAC;MAC1B;IACJ,KAAK,GAAG;MACJJ,SAAS,CAACI,KAAK,CAAC,QAAQ,CAAC;MACzB;IACJ;MACI;EACR;AACJ,CAAC;AACD;AACA,MAAME,QAAQ,GAAGR,KAAK,CAACS,MAAM,CAAC;EAC1B;EACAC,OAAO,EAAE,MAAM;EACfC,OAAO,EAAE,KAAK;EACdC,eAAe,EAAE,IAAI;EACrBC,OAAO,EAAC;IAAC,cAAc,EAAE;EAAkB;AAC/C,CAAC,CAAC;;AAEF;AACAL,QAAQ,CAACM,YAAY,CAACC,OAAO,CAACC,GAAG,CAC7BC,MAAM,IAAI;EACN;EACA,IAAId,KAAK,CAACe,KAAK,CAACC,KAAK,IAAI,IAAI,EAAE;IAC3BF,MAAM,CAACJ,OAAO,CAAC,eAAe,CAAC,GAAEV,KAAK,CAACe,KAAK,CAACC,KAAK;EACtD;EACA,OAAOF,MAAM;AACjB,CAAC,EACDX,KAAK,IAAI;EACLF,WAAW,CAACE,KAAK,CAACc,QAAQ,CAACf,MAAM,CAAC;EAClC,OAAOgB,OAAO,CAACC,MAAM,CAAChB,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACAE,QAAQ,CAACM,YAAY,CAACM,QAAQ,CAACJ,GAAG,CAC9BO,OAAO,IAAI;EACP,OAAOA,OAAO;AAClB,CAAC,EACDjB,KAAK,IAAI;EACLF,WAAW,CAACE,KAAK,CAACc,QAAQ,CAACf,MAAM,CAAC;EAClC,OAAOgB,OAAO,CAACC,MAAM,CAAChB,KAAK,CAAC;AAChC,CACJ,CAAC;;AAED;AACA,eAAeE,QAAQ"},"metadata":{},"sourceType":"module","externalDependencies":[]}